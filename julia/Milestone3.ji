#Step 1
import Pkg;
# Pkg.add("Plots");
using Plots;
using SerialPorts;
using FFTW;

# sp = SerialPort("COM3:", 115200); # On windows try "COM4:"
# s = readavailable(sp); # read from the port (s is now of type String)

# %% read from serial and create rx array
sp = SerialPort("COM3:", 115200); # On windows try "COM4:"
# write(sp, "Hello") # write a string to the port (or use a binary data type)
while bytesavailable(sp) == 0
    sleep(0.1)
end
s = readavailable(sp);
x_original = Vector{UInt8}(s); # Convert string to an array of Uint8 integers.

x = zeros(length(x_original));
for i = 1:(length(x_original)-750)
  x[i+750] = x_original[i];
end



# %% defining axes
f0 = 40000;             # Centre frequency is 10 kHz
B = 2000;               # Chirp bandwidth
T_out = 5e-3;
K = B/T_out;                # Chirp rate
td = 0.5*T_out;             # Chirp delay
dt_sample = 7.246e-6;
# dt_sample = 6.114e-6;

t_sample = collect(0:dt_sample:T_out);
c = 343;
T_rx = 60e-3;
t_rx =collect(0:dt_sample:T_rx);
r = c*t_rx/2;
N = length(t_rx)
Δf = 1/(N*dt_sample);
f_axis = (0:N-1)*Δf;


plot(x)
X = fft(x);
plot(f_axis,abs.(X))
rect(t) = (abs.(t) .<= 0.5)*1.0;
window = rect((f_axis)/B);
hanningWF = 0.5 .+ 0.5*cos.(((2*π) .* f_axis) ./ B);
hanningWindow = hanningWF .* window;








# r = c*t/2;

dt_chirp = 1.919e-7;
t_chirp = collect(0:dt_chirp:T_out); # t=0:dt:t_max defines a “range”.



# v_tx_chirp = cos.( 2*pi*(f0*(t_chirp .- dt_chirp) + 0.5*K*(t_chirp .- dt_chirp).^2) ) .* rect.((t_chirp .-dt_chirp)/T_out);
# v_tx_chirp = cos.( 2*pi*(f0*(t_chirp .- dt_chirp) + 0.5*K*(t_chirp .- dt_chirp).^2) );
v_tx_sample = cos.( 2*pi*(f0*(t_sample) + 0.5*K*(t_sample).^2) );

# write(sp, v_tx_chirp);


inverseAxisRange = r;
inverseAxixFreq = f_axis;


t_sample_padded = zeros(length(t_rx));
echo = zeros(length(t_rx));


for i = 1:length(t_sample)
  t_sample_padded[i] = v_tx_sample[i];
end

for i = 1:length(t_sample)
  echo[i] = x[i];
end

# print(echo);
# print(length(echo));

trec = [0xa8, 0xa4, 0x9f, 0xa3, 0xa8, 0xa5, 0xa3, 0xa4, 0xa7, 0xa4, 0xa0, 0xa4, 0xa9, 0xa5, 0xa1, 0xa2, 0xa7, 0xa7, 0xa1, 0xa1, 0xa8, 0xaa, 0xa1, 0x9d, 0xa8, 0xac, 0xa2, 0x9d, 0xa5, 0xac, 0xa3, 0x9c, 0xa6, 0xae, 0xa5, 0x98, 0xa2, 0xae, 0xa8, 0x9b, 0xa1, 0xaf, 0xa6, 0x9a, 0xa0, 0xb0, 0xac, 0x9a, 0x9c, 0xab, 0xae, 0x9d, 0x9b, 0xad, 0xb0, 0x9b, 0x95, 0xac, 0xb4, 0x9e, 0x96, 0xaa, 0xb2, 0x9e, 0x94, 0xaa, 0xb5, 0xa2, 0x94, 0xa3, 0xb3, 0xa6, 0x96, 0xa2, 0xb4, 0xa7, 0x94, 0x9e, 0xb5, 0xac, 0x95, 0x9c, 0xb1, 0xad, 0x96, 0x9b, 0xb3, 0xb0, 0x97, 0x95, 0xb1, 0xb3, 0x99, 0x97, 0xb0, 0xb2, 0x96, 0x96, 0xb1, 0xb5, 0x9b, 0x94, 0xab, 0xb3, 0x9d, 0x95, 0xab, 0xb5, 0x9e, 0x91, 0xa7, 0xb5, 0xa4, 0x93, 0xa6, 0xb6, 0xa1, 0x91, 0xa3, 0xb9, 0xa6, 0x92, 0xa2, 0xb5, 0xa6, 0x91, 0xa3, 0xb8, 0xa9, 0x91, 0x9d, 0xb6, 0xab, 0x94, 0x9e, 0xb5, 0xac, 0x93, 0x9b, 0xb5, 0xae, 0x97, 0x99, 0xb2, 0xaf, 0x96, 0x98, 0xb1, 0xb3, 0x96, 0x94, 0xb1, 0xb5, 0x99, 0x92, 0xb1, 0xb5, 0x99, 0x93, 0xae, 0xb7, 0x9b, 0x92, 0xaa, 0xb7, 0xa0, 0x91, 0xa8, 0xb7, 0xa1, 0x90, 0xa6, 0xb8, 0xa5, 0x91, 0xa3, 0xb6, 0xa4, 0x93, 0xa3, 0xb8, 0xa8, 0x91, 0x9d, 0xb5, 0xac, 0x95, 0x9d, 0xb6, 0xac, 0x91, 0x9a, 0xb7, 0xb1, 0x94, 0x99, 0xb2, 0xaf, 0x96, 0x98, 0xb4, 0xb2, 0x96, 0x94, 0xb0, 0xb4, 0x98, 0x97, 0xb0, 0xb3, 0x99, 0x93, 0xae, 0xb4, 0x9e, 0x93, 0xa9, 0xb5, 0x9f, 0x93, 0xa8, 0xb8, 0xa2, 0x90, 0xa5, 0xb8, 0xa4, 0x92, 0xa4, 0xb8, 0xa4, 0x92, 0xa3, 0xb7, 0xa8, 0x93, 0x9f, 0xb3, 0xa9, 0x94, 0xa0, 0xb5, 0xab, 0x94, 0x9b, 0xb3, 0xac, 0x98, 0x9d, 0xb1, 0xab, 0x97, 0x9c, 0xaf, 0xb0, 0x9a, 0x98, 0xae, 0xaf, 0x9b, 0x99, 0xb0, 0xb0, 0x99, 0x98, 0xad, 0xb0, 0x9b, 0x9a, 0xad, 0xae, 0x9b, 0x9a, 0xad, 0xaf, 0x9c, 0x99, 0xaa, 0xb0, 0x9e, 0x99, 0xaa, 0xae, 0x9f, 0x98, 0xa9, 0xb1, 0x9f, 0x98, 0xa7, 0xb0, 0x9f, 0x98, 0xaa, 0xb1, 0xa0, 0x95, 0xa8, 0xb2, 0xa1, 0x98, 0xa8, 0xb1, 0x9f, 0x95, 0xa9, 0xb3, 0xa4, 0x97, 0xa4, 0xb0, 0xa1, 0x9a, 0xa6, 0xb1, 0xa4, 0x97, 0xa2, 0xaf, 0xa7, 0x9a, 0xa3, 0xb1, 0xa4, 0x96, 0xa2, 0xb3, 0xa8, 0x97, 0xa2, 0xb0, 0xa5, 0x97, 0xa3, 0xb3, 0xa7, 0x97, 0xa0, 0xb0, 0xa7, 0x98, 0xa1, 0xb2, 0xa7, 0x96, 0xa1, 0xb2, 0xa8, 0x96, 0xa2, 0xb1, 0xa6, 0x97, 0xa2, 0xb2, 0xa7, 0x96, 0xa0, 0xb1, 0xa9, 0x98, 0xa1, 0xb2, 0xa7, 0x97, 0x9f, 0xb2, 0xaa, 0x97, 0x9f, 0xae, 0xaa, 0x98, 0x9f, 0xb2, 0xaa, 0x97, 0xad, 0x9a, 0x9c, 0xb0, 0xad, 0x99, 0x98, 0xb0, 0xaf, 0x9a, 0x9c, 0xaf, 0xac, 0x96, 0x9c, 0xb2, 0xae, 0x99, 0x9b, 0xaf, 0xab, 0x98, 0x9e, 0xb1, 0xad, 0x98, 0x9a, 0xae, 0xac, 0x9c, 0x9d, 0xaf, 0xac, 0x97, 0x9b, 0xaf, 0xb0, 0x99, 0x9b, 0xb0, 0xab, 0x97, 0x9b, 0xb3, 0xaf, 0x98, 0x9a, 0xaf, 0xad, 0x98, 0x9c, 0xb3, 0xad, 0x96, 0x9a, 0xb2, 0xae, 0x97, 0x9c, 0xb1, 0xaa, 0x96, 0x9d, 0xb2, 0xab, 0x99, 0x9b, 0xaf, 0xac, 0x98, 0x9c, 0xb0, 0xae, 0x97, 0x9a, 0xb2, 0xae, 0x98, 0x9a, 0xb1, 0xac, 0x97, 0x9d, 0xb1, 0xad, 0x98, 0x9b, 0xb0, 0xac, 0x9a, 0x9d, 0xb0, 0xab, 0x97, 0x9a, 0xb1, 0xae, 0x9a, 0x9d, 0xae, 0xaa, 0x98, 0x9f, 0xb1, 0xab, 0x9a, 0x9d, 0xad, 0xa9, 0x9b, 0xa1, 0xae, 0xa9, 0x99, 0x9e, 0xaf, 0xa9, 0x9c, 0xa1, 0xad, 0xa6, 0x99, 0xa2, 0xad, 0xa9, 0x9c, 0xa1, 0xac, 0xa6, 0x9c, 0xa1, 0xb0, 0xa7, 0x99, 0xa1, 0xae, 0xa7, 0x9b, 0xa5, 0xaf, 0xa3, 0x99, 0xa5, 0xae, 0xa4, 0x9b, 0xa6, 0xac, 0xa2, 0x9c, 0xa6, 0xae, 0xa3, 0x9b, 0xa4, 0xad, 0xa2, 0x9e, 0xa7, 0xad, 0xa0, 0x9a, 0xa8, 0xad, 0xa3, 0x9c, 0xa7, 0xab, 0x9f, 0x9c, 0xa7, 0xaf, 0xa1, 0x9a, 0xa7, 0xad, 0xa0, 0x9a, 0xab, 0xae, 0x9d, 0x9a, 0xaa, 0xae, 0x9e, 0x9c, 0xab, 0xab, 0x9c, 0x9c, 0xac, 0xae, 0x9c, 0x9c, 0xaa, 0xac, 0x9e, 0x9d, 0xac, 0xab, 0x9d, 0x9b, 0xab, 0xae, 0x9d, 0x9c, 0xaa, 0xad, 0x9c, 0x9c, 0xad, 0xad, 0x9c, 0x9a, 0xab, 0xad, 0x9d, 0x9d, 0xac, 0xac, 0x9b, 0x9a, 0xae, 0xae, 0x9e, 0x9c, 0xab, 0xab, 0x9a, 0x9e, 0xad, 0xad, 0x9d, 0x9c, 0xa9, 0xaa, 0xa0, 0x9f, 0xab, 0xab, 0x9c, 0x9b, 0xaa, 0xad, 0xa0, 0x9e, 0xab, 0xa9, 0x9c, 0x9e, 0xac, 0xac, 0x9e, 0x9e, 0xa9, 0xa9, 0x9f, 0xa0, 0xa9, 0xaa, 0x9f, 0x9e, 0xa9, 0xa9, 0xa0, 0x9f, 0xaa, 0xa9, 0x9d, 0xa0, 0xab, 0xa8, 0x9f, 0xa1, 0xa9, 0xa6, 0xa0, 0xa3, 0xa9, 0xa6, 0x9e, 0xa2, 0xa8, 0xa7, 0xa1, 0xa2, 0xa8, 0xa3, 0xa0, 0xa4, 0xa9, 0xa6, 0xa1, 0xa3, 0xa4, 0xa5, 0xa3, 0xa5, 0xa8, 0xa4, 0xa1, 0xa1, 0xa7, 0xa7, 0xa2, 0xa4, 0xa7, 0xa3, 0xa0, 0xa4, 0xa9, 0xa5, 0xa2, 0xa4, 0xa4, 0xa3, 0xa3, 0xa5, 0xa6, 0xa4, 0xa1, 0xa4, 0xa6, 0xa5, 0xa4, 0xa4, 0xa6, 0xa2, 0xa3, 0xa5, 0xa5, 0xa5, 0xa5, 0xa4, 0xa1, 0xa4, 0xa6, 0xa5, 0xa4, 0xa5]

for i = 1:length(trec)
  t_sample_padded[i] = trec[i];
end

V_TX = fft(t_sample_padded);
V_RX = fft(x);

# Read from serial
# v_rx = A1*cos.( 2*pi*(f0*(t.-td.-td1) + 0.5*K*(t.-td.-td1).^2) ) .* rect((t.- td.-td1)/T) + A2*cos.( 2*pi*(f0*(t.-td.-td2) + 0.5*K*(t.-td.-td2).^2) ) .* rect((t.- td.-td2)/T) + A3*cos.( 2*pi*(f0*(t.-td.-td3) + 0.5*K*(t.-td.-td3).^2) ) .* rect((t.- td.-td3)/T);
# V_RX = fft(v_rx);

#%%
# Define matched filter
H = conj( V_TX);
V_MF = H.*V_RX;
v_mf = ifft(V_MF);
v_mf = real(v_mf);

V_ANAL = 2*V_MF;
N = length(V_MF);

if mod(N,2)==0; # case N even
    neg_freq_range = Int(N/2):N; # Define range of “neg-freq” components
else # case N odd
    neg_freq_range = Int((N+1)/2):N;
end

V_ANAL[neg_freq_range] .= 0;
v_anal = ifft(V_ANAL);

j=im; # Assign j as sqrt(-1) (“im” in julia)
v_bb = v_anal.*exp.(-j*2*pi*f0*x);
V_BB = fft(v_bb);
vHanningReduced = V_BB .* hanningWindow;

plot(v_mf)
plot(r, v_mf)

plot(r, abs.(ifft(vHanningReduced)))

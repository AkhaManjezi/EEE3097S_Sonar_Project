import Pkg;
using Plots;
using SerialPorts;
using FFTW;
using Statistics;

#
rect(t) = (abs.(t) .<= 0.5)*1.0;

# define constants and axes
receivePeriod = 7.246e-6;
receivingTime = 60e-3;
receiveTimeAxis = collect(5e-3:receivePeriod:receivingTime+5e-3)
B = 2000;
f0 = 40e3;
N = length(receiveTimeAxis);
Δf = 1/(N*receivePeriod);
f_axis = (0:N-1)*Δf;
c = 343;
range = c*receiveTimeAxis/2;
rangeDependence = range.^2;



# tranmitting array
v_tx = [143,145,155,155,146,144,154,155,143,143,155,160,145,138,152,160,149,137,152,164,147,132,147,169,152,132,147,167,152,128,146,171,157,129,138,167,160,133,138,168,164,129,132,167,168,136,130,163,168,135,128,161,175,138,123,158,175,142,121,158,178,142,119,153,180,147,121,150,177,151,120,146,179,155,120,139,179,160,120,137,177,164,119,134,179,168,122,130,172,171,127,127,173,174,126,120,170,181,130,120,167,179,131,117,167,183,137,116,158,182,140,118,157,184,144,112,151,184,151,115,148,183,150,114,144,186,158,114,139,182,161,117,138,185,163,114,133,182,167,117,132,179,168,118,132,180,170,120,126,176,174,127,124,173,177,125,119,169,182,131,118,166,179,133,116,167,184,135,114,160,184,138,116,161,184,140,112,156,186,145,115,152,184,148,114,150,185,153,112,144,187,156,113,141,188,157,111,139,186,162,112,137,183,163,116,133,183,167,116,129,182,172,118,127,180,171,119,125,179,177,121,121,173,180,125,119,174,182,125,113,172,187,129,114,169,185,128,112,169,188,135,110,161,188,138,112,160,189,140,108,155,191,143,110,156,189,143,108,154,191,149,109,148,189,152,109,145,190,157,106,141,191,159,109,138,190,159,110,138,188,162,110,136,186,164,113,134,187,165,112,132,186,169,115,129,182,169,117,128,183,172,118,125,177,175,120,125,175,179,123,118,174,180,126,116,170,182,129,117,169,183,130,116,165,183,134,116,165,182,135,115,163,185,137,115,161,183,138,115,161,185,139,113,155,186,142,114,157,185,141,110,157,187,144,114,154,184,141,115,155,186,146,113,149,183,150,116,151,185,147,111,150,187,151,114,149,183,148,114,148,187,152,114,145,183,152,114,149,185,152,113,145,185,153,117,147,182,152,116,146,183,155,118,143,180,155,119,144,180,156,116,144,182,156,118,144,179,154,119,145,181,155,119,141,178,158,121,143,178,156,119,141,181,157,121,144,177,153,119,147,179,155,121,142,175,154,125,145,176,155,121,142,174,157,127,144,173,152,125,145,174,156,126,144,171,153,127,145,174,153,126,147,171,152,129,150,169,146,126,151,172,151,130,148,167,147,134,151,168,148,130,149,165,151,134,151,165,145,132,153,168,148,133,153,163,145,135,154,166,144,134,154,164,144,134,158,165,140,133,157,165,141,137,158,160,140,137,159,161,141,138,157,161,140,139,159,161,139,136,160,162,139,139,159,160,137,140,161,160,138,137,161,159,138,142,161,158,135,142,163,157,138,143,162,153,135,147,163,155,137,144,159,151,141,147,161,152,137,146,161,150,140,150,160,148,136,151,161,149,141,151,157,145,141,154,158,147,139,152,158,145,142,154,159,141,139,158,158,141,140,160,156,138,144,160,155,137,144,162,153,138,146,164,153,135,145,164,154,135,146,164,150,134,147,166,155,134,145,163,152,135,147,164,154,134,143,165,154,135,145,167,152,132,147,167,152,132,150,166,148,134,151,166,148,134,151,163,148,136,153,164,144,134,153,165,146,135,155,160,144,137,156,163,143,136,153,163,144,137,157,162,141,135,158,163,141,139,159,159,138,140,162,159,139,141,158,155,138,146,161,155,139,142,159,153,141,147,160,151,136,147,161,153,140,148,159,148,139,151,160,149,139,151,159,147,139,152,162,145,137,160,145,141,154,157,142,141,158,157,142];

# v_tx = [0xa8, 0xa4, 0x9f, 0xa3, 0xa8, 0xa5, 0xa3, 0xa4, 0xa7, 0xa4, 0xa0, 0xa4, 0xa9, 0xa5, 0xa1, 0xa2, 0xa7, 0xa7, 0xa1, 0xa1, 0xa8, 0xaa, 0xa1, 0x9d, 0xa8, 0xac, 0xa2, 0x9d, 0xa5, 0xac, 0xa3, 0x9c, 0xa6, 0xae, 0xa5, 0x98, 0xa2, 0xae, 0xa8, 0x9b, 0xa1, 0xaf, 0xa6, 0x9a, 0xa0, 0xb0, 0xac, 0x9a, 0x9c, 0xab, 0xae, 0x9d, 0x9b, 0xad, 0xb0, 0x9b, 0x95, 0xac, 0xb4, 0x9e, 0x96, 0xaa, 0xb2, 0x9e, 0x94, 0xaa, 0xb5, 0xa2, 0x94, 0xa3, 0xb3, 0xa6, 0x96, 0xa2, 0xb4, 0xa7, 0x94, 0x9e, 0xb5, 0xac, 0x95, 0x9c, 0xb1, 0xad, 0x96, 0x9b, 0xb3, 0xb0, 0x97, 0x95, 0xb1, 0xb3, 0x99, 0x97, 0xb0, 0xb2, 0x96, 0x96, 0xb1, 0xb5, 0x9b, 0x94, 0xab, 0xb3, 0x9d, 0x95, 0xab, 0xb5, 0x9e, 0x91, 0xa7, 0xb5, 0xa4, 0x93, 0xa6, 0xb6, 0xa1, 0x91, 0xa3, 0xb9, 0xa6, 0x92, 0xa2, 0xb5, 0xa6, 0x91, 0xa3, 0xb8, 0xa9, 0x91, 0x9d, 0xb6, 0xab, 0x94, 0x9e, 0xb5, 0xac, 0x93, 0x9b, 0xb5, 0xae, 0x97, 0x99, 0xb2, 0xaf, 0x96, 0x98, 0xb1, 0xb3, 0x96, 0x94, 0xb1, 0xb5, 0x99, 0x92, 0xb1, 0xb5, 0x99, 0x93, 0xae, 0xb7, 0x9b, 0x92, 0xaa, 0xb7, 0xa0, 0x91, 0xa8, 0xb7, 0xa1, 0x90, 0xa6, 0xb8, 0xa5, 0x91, 0xa3, 0xb6, 0xa4, 0x93, 0xa3, 0xb8, 0xa8, 0x91, 0x9d, 0xb5, 0xac, 0x95, 0x9d, 0xb6, 0xac, 0x91, 0x9a, 0xb7, 0xb1, 0x94, 0x99, 0xb2, 0xaf, 0x96, 0x98, 0xb4, 0xb2, 0x96, 0x94, 0xb0, 0xb4, 0x98, 0x97, 0xb0, 0xb3, 0x99, 0x93, 0xae, 0xb4, 0x9e, 0x93, 0xa9, 0xb5, 0x9f, 0x93, 0xa8, 0xb8, 0xa2, 0x90, 0xa5, 0xb8, 0xa4, 0x92, 0xa4, 0xb8, 0xa4, 0x92, 0xa3, 0xb7, 0xa8, 0x93, 0x9f, 0xb3, 0xa9, 0x94, 0xa0, 0xb5, 0xab, 0x94, 0x9b, 0xb3, 0xac, 0x98, 0x9d, 0xb1, 0xab, 0x97, 0x9c, 0xaf, 0xb0, 0x9a, 0x98, 0xae, 0xaf, 0x9b, 0x99, 0xb0, 0xb0, 0x99, 0x98, 0xad, 0xb0, 0x9b, 0x9a, 0xad, 0xae, 0x9b, 0x9a, 0xad, 0xaf, 0x9c, 0x99, 0xaa, 0xb0, 0x9e, 0x99, 0xaa, 0xae, 0x9f, 0x98, 0xa9, 0xb1, 0x9f, 0x98, 0xa7, 0xb0, 0x9f, 0x98, 0xaa, 0xb1, 0xa0, 0x95, 0xa8, 0xb2, 0xa1, 0x98, 0xa8, 0xb1, 0x9f, 0x95, 0xa9, 0xb3, 0xa4, 0x97, 0xa4, 0xb0, 0xa1, 0x9a, 0xa6, 0xb1, 0xa4, 0x97, 0xa2, 0xaf, 0xa7, 0x9a, 0xa3, 0xb1, 0xa4, 0x96, 0xa2, 0xb3, 0xa8, 0x97, 0xa2, 0xb0, 0xa5, 0x97, 0xa3, 0xb3, 0xa7, 0x97, 0xa0, 0xb0, 0xa7, 0x98, 0xa1, 0xb2, 0xa7, 0x96, 0xa1, 0xb2, 0xa8, 0x96, 0xa2, 0xb1, 0xa6, 0x97, 0xa2, 0xb2, 0xa7, 0x96, 0xa0, 0xb1, 0xa9, 0x98, 0xa1, 0xb2, 0xa7, 0x97, 0x9f, 0xb2, 0xaa, 0x97, 0x9f, 0xae, 0xaa, 0x98, 0x9f, 0xb2, 0xaa, 0x97, 0xad, 0x9a, 0x9c, 0xb0, 0xad, 0x99, 0x98, 0xb0, 0xaf, 0x9a, 0x9c, 0xaf, 0xac, 0x96, 0x9c, 0xb2, 0xae, 0x99, 0x9b, 0xaf, 0xab, 0x98, 0x9e, 0xb1, 0xad, 0x98, 0x9a, 0xae, 0xac, 0x9c, 0x9d, 0xaf, 0xac, 0x97, 0x9b, 0xaf, 0xb0, 0x99, 0x9b, 0xb0, 0xab, 0x97, 0x9b, 0xb3, 0xaf, 0x98, 0x9a, 0xaf, 0xad, 0x98, 0x9c, 0xb3, 0xad, 0x96, 0x9a, 0xb2, 0xae, 0x97, 0x9c, 0xb1, 0xaa, 0x96, 0x9d, 0xb2, 0xab, 0x99, 0x9b, 0xaf, 0xac, 0x98, 0x9c, 0xb0, 0xae, 0x97, 0x9a, 0xb2, 0xae, 0x98, 0x9a, 0xb1, 0xac, 0x97, 0x9d, 0xb1, 0xad, 0x98, 0x9b, 0xb0, 0xac, 0x9a, 0x9d, 0xb0, 0xab, 0x97, 0x9a, 0xb1, 0xae, 0x9a, 0x9d, 0xae, 0xaa, 0x98, 0x9f, 0xb1, 0xab, 0x9a, 0x9d, 0xad, 0xa9, 0x9b, 0xa1, 0xae, 0xa9, 0x99, 0x9e, 0xaf, 0xa9, 0x9c, 0xa1, 0xad, 0xa6, 0x99, 0xa2, 0xad, 0xa9, 0x9c, 0xa1, 0xac, 0xa6, 0x9c, 0xa1, 0xb0, 0xa7, 0x99, 0xa1, 0xae, 0xa7, 0x9b, 0xa5, 0xaf, 0xa3, 0x99, 0xa5, 0xae, 0xa4, 0x9b, 0xa6, 0xac, 0xa2, 0x9c, 0xa6, 0xae, 0xa3, 0x9b, 0xa4, 0xad, 0xa2, 0x9e, 0xa7, 0xad, 0xa0, 0x9a, 0xa8, 0xad, 0xa3, 0x9c, 0xa7, 0xab, 0x9f, 0x9c, 0xa7, 0xaf, 0xa1, 0x9a, 0xa7, 0xad, 0xa0, 0x9a, 0xab, 0xae, 0x9d, 0x9a, 0xaa, 0xae, 0x9e, 0x9c, 0xab, 0xab, 0x9c, 0x9c, 0xac, 0xae, 0x9c, 0x9c, 0xaa, 0xac, 0x9e, 0x9d, 0xac, 0xab, 0x9d, 0x9b, 0xab, 0xae, 0x9d, 0x9c, 0xaa, 0xad, 0x9c, 0x9c, 0xad, 0xad, 0x9c, 0x9a, 0xab, 0xad, 0x9d, 0x9d, 0xac, 0xac, 0x9b, 0x9a, 0xae, 0xae, 0x9e, 0x9c, 0xab, 0xab, 0x9a, 0x9e, 0xad, 0xad, 0x9d, 0x9c, 0xa9, 0xaa, 0xa0, 0x9f, 0xab, 0xab, 0x9c, 0x9b, 0xaa, 0xad, 0xa0, 0x9e, 0xab, 0xa9, 0x9c, 0x9e, 0xac, 0xac, 0x9e, 0x9e, 0xa9, 0xa9, 0x9f, 0xa0, 0xa9, 0xaa, 0x9f, 0x9e, 0xa9, 0xa9, 0xa0, 0x9f, 0xaa, 0xa9, 0x9d, 0xa0, 0xab, 0xa8, 0x9f, 0xa1, 0xa9, 0xa6, 0xa0, 0xa3, 0xa9, 0xa6, 0x9e, 0xa2, 0xa8, 0xa7, 0xa1, 0xa2, 0xa8, 0xa3, 0xa0, 0xa4, 0xa9, 0xa6, 0xa1, 0xa3, 0xa4, 0xa5, 0xa3, 0xa5, 0xa8, 0xa4, 0xa1, 0xa1, 0xa7, 0xa7, 0xa2, 0xa4, 0xa7, 0xa3, 0xa0, 0xa4, 0xa9, 0xa5, 0xa2, 0xa4, 0xa4, 0xa3, 0xa3, 0xa5, 0xa6, 0xa4, 0xa1, 0xa4, 0xa6, 0xa5, 0xa4, 0xa4, 0xa6, 0xa2, 0xa3, 0xa5, 0xa5, 0xa5, 0xa5, 0xa4, 0xa1, 0xa4, 0xa6, 0xa5, 0xa4, 0xa5]


# %% create array to use for matched filter
avg_tx = mean(v_tx);
v_tx = v_tx .- avg_tx;

v_tx_padded = zeros(length(receiveTimeAxis))
for i = 1:length(v_tx)
  v_tx_padded[i] = v_tx[i];
end

# fourier transform of tx chirp
V_TX = fft(v_tx_padded);

# define matched filter
H = conj(V_TX);

# read from serial and create receive array
# while true
sp = SerialPort("COM3:", 115200);
while bytesavailable(sp) == 0
  sleep(0.1)
end

sbuffer = readavailable(sp);

v_rx = Vector{UInt8}(sbuffer);
if (length(v_rx) != 8281)
  println("array size incorrect")
  println(length(v_rx))
  close(sp);
else
  println("array size correct")
  close(sp);
end


# remove DC Component from received signal
avg_in = mean(v_rx);
v_rx = v_rx .- avg_in;

# fourier transform received array
V_RX = fft(v_rx);

# matched filter
V_MF = H .* V_RX;
v_mf = ifft(V_MF);
v_mf = real(v_mf);

# range compensation
v_mf_compensated = rangeDependence .* v_mf;

# end
# plot(range[1:7452], abs.(v_mf)[1:7452])

window = rect((f_axis)/B);
hanningWF = 0.5 .+ 0.5*cos.(((2*π) .* f_axis) ./ B);
hanningWindow = hanningWF .* window;
# %% create ANAL functions
V_ANAL = 2*V_MF;
if mod(N,2)==0; # case N even
    neg_freq_range = Int(N/2):N; # Define range of “neg-freq” components
else # case N odd
    neg_freq_range = Int((N+1)/2):N;
end
V_ANAL[neg_freq_range] .= 0;
v_anal = ifft(V_ANAL);

# %% create baseband function
j=im; # Assign j as sqrt(-1) (“im” in julia)
v_bb = v_anal.*exp.(-j*2*pi*f0*receiveTimeAxis);
V_BB = fft(v_bb);

# %% output rect window result
RECTwindow = V_BB .* window;
rectwindow = ifft(RECTwindow);
display(plot(range, abs.(rectwindow)))

# %% output hanning window result
VHANNINGOUT = V_BB .* hanningWindow;
vhanningout = ifft(VHANNINGOUT);
display(plot(range, abs.(vhanningout)))

# %% output matched filter results
display(plot(range[1:7452], abs.(v_mf_compensated)[1:7452]))
display(plot(range[1:7452], abs.(v_mf[1:7452])))
plot(v_mf)

# %% inverse filter setup and output
# rect(f_axis) = (abs.(f_axis) .<= 0.5)*1.0;
# V_ANAL_inverse_filter_only = (V_TX ./ V_RX) .* rect.((f_axis .- f0)/B);
# v_anal_inverse_filter_only = ifft(V_ANAL_inverse_filter_only);
#
# plot(range, abs.(v_anal_inverse_filter_only))
# plot(range, real.(v_anal_inverse_filter_only))
#
